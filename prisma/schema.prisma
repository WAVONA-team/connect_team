// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                           String     @id @default(cuid())
    name                         String?
    email                        String?    @unique
    image                        String
    description                  String?
    profession                   String?
    isVisibleForTeam             Boolean?
    telegram                     String?
    discord                      String?
    city                         String?
    age                          Int?
    preferredTypeOfCommunication String?
    languages                    String?
    emailVerified                DateTime?
    createdProjects              Project[]  @relation("ProjectCreator")
    memberOfProjects             Project[]  @relation("ProjectMembers")
    responses                    Response[]
    accounts                     Account[]
    sessions                     Session[]
}

model Project {
    id                           String               @id @default(cuid())
    image                        String
    title                        String
    term                         String
    published                    DateTime
    deadline                     DateTime
    status                       String
    target                       String
    description                  String
    preferredTypeOfCommunication String?
    email                        String?
    telegram                     String?
    discord                      String?
    site                         String?
    userId                       String
    creator                      User                 @relation(name: "ProjectCreator", fields: [userId], references: [id])
    members                      User[]               @relation(name: "ProjectMembers")
    requiredPeople               RequiredPeopleState?
    responses                    Response[]
}

model Response {
    id         String   @id @default(cuid())
    userId     String
    profession String
    projectId  String
    date       DateTime
    status     String
    message    String?
    project    Project  @relation(fields: [projectId], references: [id])
    candidate  User     @relation(fields: [userId], references: [id])
}

model RequiredPeopleState {
    id             String  @id @default(cuid())
    projectId      String  @unique
    requiredPeople String
    project        Project @relation(fields: [projectId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
